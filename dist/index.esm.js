function t(t,n){const o=String(t).length-String(t).indexOf(".")-1,h=String(n).length-String(n).indexOf(".")-1;return o<h?(Math.round(t*Math.pow(10,h))+Math.round(n*Math.pow(10,h)))/Math.pow(10,h):(Math.round(t*Math.pow(10,o))+Math.round(n*Math.pow(10,o)))/Math.pow(10,o)}function n(t,n){const o=String(t).length-String(t).indexOf(".")-1,h=String(n).length-String(n).indexOf(".")-1;return o<h?(Math.round(t*Math.pow(10,h))-Math.round(n*Math.pow(10,h)))/Math.pow(10,h):(Math.round(t*Math.pow(10,o))-Math.round(n*Math.pow(10,o)))/Math.pow(10,o)}function o(t,n){const o=String(t).length-String(t).indexOf(".")-1,h=String(n).length-String(n).indexOf(".")-1;return o<h?Math.round(t*Math.pow(10,h))*Math.round(n*Math.pow(10,h))/Math.pow(10,h+h):Math.round(t*Math.pow(10,o))*Math.round(n*Math.pow(10,o))/Math.pow(10,o+o)}function h(t,n){const o=String(t).length-String(t).indexOf(".")-1,h=String(n).length-String(n).indexOf(".")-1;return o<h?Math.round(t*Math.pow(10,h))/Math.round(n*Math.pow(10,h)):Math.round(t*Math.pow(10,o))/Math.round(n*Math.pow(10,o))}export{h as divide,n as minus,o as multiply,t as plus};
